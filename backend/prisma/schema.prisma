// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------- Models ------------------------------- //
model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String
  profilePhoto        String?
  password            String
  role                UserRole              @default(user)
  status              UserStatus            @default(deactive)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  securityDetails     SecurityDetails?
  review              Review[]
  comment             Comment[]
  watchlist           Watchlist[]
  purchaseRentHistory PurchaseRentHistory[]
  paymentTransaction  PaymentTransaction[]
  notification        Notification[]

  @@map("users")
}

model SecurityDetails {
  id                   String  @id @default(cuid())
  userId               String  @unique
  user                 User    @relation(fields: [userId], references: [id])
  isEmailVerified      Boolean @default(false)
  otpToken             String?
  emailVerifyAttemptNo Int     @default(0)

  failedResetPassAttemptNo Int      @default(0)
  failedOTPAttemptNo       Int      @default(0)
  lastAttemptTime          DateTime @default(now())

  failedLoginAttemptNo Int       @default(0)
  lastLoginTime        DateTime  @default(now())
  suspendUntil         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  device               Device[]

  @@index([userId])
  @@map("security_details")
}

model Device {
  id                String @id @default(cuid())
  machineId         String @default("")
  securityDetailsId String

  securityDetails SecurityDetails @relation(fields: [securityDetailsId], references: [id])
  type            DeviceType
  browser         String
  name            String
  os              String
  ip              String?
  userAgent       String
  location        String
  isActive        Boolean
  isPreferred     Boolean
  isInfected      Boolean
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([securityDetailsId])
  @@map("devices")
}

model MovieSeries {
  id                  String                @id @default(cuid())
  title               String
  description         String
  releaseYear         Int
  genre               Genre[]
  director            String
  cast                String
  streamingPlatform   StreamingPlatform[]
  rating              Float                 @default(0)
  price               Float // The base price for buy/rent
  priceType           PriceType // Buy or Rent type
  discount            Float? // Optional discount
  discountType        DiscountType? // Discount type (percentage or fixed)
  discountExpiry      DateTime? // Expiration date for the discount
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  reviews             Review[]
  watchlist           Watchlist[]
  purchaseRentHistory PurchaseRentHistory[]

  @@map("movie_series")
}

model Review {
  id            String       @id @default(cuid())
  movieSeriesId String
  userId        String
  rating        Int          @default(1)
  writtenReview String
  isSpoiler     Boolean      @default(false)
  tags          String[]
  likesCount    Int          @default(0)
  commentCount  Int          @default(0)
  status        ReviewStatus @default(pending)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  movieSeries MovieSeries @relation(fields: [movieSeriesId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  comment     Comment[]

  @@map("reviews")
}

model Comment {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  content   String
  replyTo   String? // Reference to another comment if it's a reply
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Watchlist {
  id            String   @id @default(cuid())
  userId        String
  movieSeriesId String
  addedAt       DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  movieSeries MovieSeries @relation(fields: [movieSeriesId], references: [id])

  @@map("watchlists")
}

model PurchaseRentHistory {
  id            String        @id @default(cuid())
  userId        String
  movieSeriesId String
  purchaseType  PriceType
  purchaseDate  DateTime      @default(now())
  paymentStatus PaymentStatus
  price         Float
  transactionId String
  accessExpiry  DateTime?
  isEmailSent   Boolean       @default(false)

  user        User        @relation(fields: [userId], references: [id])
  movieSeries MovieSeries @relation(fields: [movieSeriesId], references: [id])

  @@map("purchase_rent_history")
}

model PaymentTransaction {
  id            String        @id @default(cuid())
  userId        String
  amount        Float
  transactionId String
  status        PaymentStatus
  paymentMethod String        @default("stripe")
  createdAt     DateTime      @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("payment_transactions")
}

model AdminAnalytics {
  id                   String   @id @default(cuid())
  date                 DateTime @default(now())
  totalPurchases       Int      @default(0)
  totalRentals         Int      @default(0)
  totalRevenue         Float    @default(0)
  totalReviews         Int      @default(0)
  totalApprovedReviews Int      @default(0)

  @@map("admin_analytics")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// ------------------------------ Enums ---------------------------//

enum UserRole {
  s_admin
  admin
  user
}

enum UserStatus {
  deactive
  active
  blocked
  suspended
  deleted
}

enum DeviceType {
  mobile
  desktop
  tablet
  other
}

enum Gender {
  male
  female
}

enum Genre {
  action
  comedy
  drama
  horror
  thriller
  romance
  documentary
  sci_fi
  fantasy
  mystery
}

enum StreamingPlatform {
  netflix
  disney_plus
  amazon_prime
  hulu
  youtube
  self_hosted
}

enum PriceType {
  buy
  rent
}

enum DiscountType {
  percentage
  fixed
}

enum ReviewStatus {
  pending
  approved
  unpublished
}

enum PaymentStatus {
  pending
  successful
  failed
  refunded
  cancelled
}
